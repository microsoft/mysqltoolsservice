# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
pr: none
strategy:
  matrix:
    linux:
      imageName: 'ubuntu-18.04'
      buildScript: 'scripts/build-linux.sh'
      buildScriptArgs: ''
      archiveType: 'tar'
      archiveFileName: 'mysqltoolsservice-linux-x64.tar.gz'
    ubuntu22:
      imageName: 'ubuntu-22.04'
      buildScript: 'scripts/build-linux.sh'
      buildScriptArgs: 'ubuntu22'
      archiveType: 'tar'
      archiveFileName: 'mysqltoolsservice-ubuntu22-x64.tar.gz'
    mac:
      imageName: 'macOS-latest'
      buildScript: 'scripts/build-mac.sh'
      buildScriptArgs: ''
      archiveType: 'tar'
      archiveFileName: 'mysqltoolsservice-osx.tar.gz'
    windows:
      imageName: 'windows-latest'
      buildScript: 'scripts/build.sh'
      buildScriptArgs: ''
      archiveType: 'zip'
      archiveFileName: 'mysqltoolsservice-win-x64.zip'

pool:
  vmImage: $(imageName)

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.10'
- task: Bash@3
  inputs:
    filePath: $(buildScript)
    arguments: $(buildScriptArgs)
- task: EsrpCodeSigning@2
  displayName: 'Code Signing'
  inputs:
    ConnectedServiceName: 'Database System ESRP Connector'
    FolderPath: '$(Build.SourcesDirectory)/build/mysqltoolsservice'
    Pattern: '*.exe,*.dll'
    useMinimatch: true
    signConfigType: inlineSignParams
    inlineOperation: |
      [
        {
          "KeyCode" : "CP-230012",
          "OperationCode" : "SigntoolSign",
          "Parameters" : {
              "OpusName" : "Microsoft",
              "OpusInfo" : "http://www.microsoft.com",
              "FileDigest" : "/fd \"SHA256\"",
              "PageHash" : "/NPH",
              "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
            },
          "ToolName" : "sign",
          "ToolVersion" : "1.0"
        },
        {
          "KeyCode" : "CP-230012",
          "OperationCode" : "SigntoolVerify",
          "Parameters" : {},
          "ToolName" : "sign",
          "ToolVersion" : "1.0"
        }
      ]
    SessionTimeout: '60'
    MaxConcurrency: '50'
    MaxRetryAttempts: '5'
- task: EsrpCodeSigning@2
  displayName: 'Code Signing for linux and mac'
  condition: ne(variables['imageName'], 'windows-latest')
  inputs:
    ConnectedServiceName: 'Database System ESRP Connector'
    FolderPath: '$(Build.SourcesDirectory)/build/mysqltoolsservice'
    Pattern: '*'
    useMinimatch: true
    signConfigType: inlineSignParams
    inlineOperation: |
      [
        {
          "KeyCode" : "CP-450779-Pgp",
          "OperationCode" : "PgpClearSign",
          "Parameters" : {},
          "ToolName" : "sign",
          "ToolVersion" : "1.0"
        }
      ]
    SessionTimeout: '60'
    MaxConcurrency: '50'
    MaxRetryAttempts: '5'
- task: DeleteFiles@1
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)/build/mysqltoolsservice'
    Contents: CodeSignSummary*
- task: ArchiveFiles@2
  inputs:
    rootFolderorFile: '$(Build.SourcesDirectory)/build/mysqltoolsservice'
    archiveType: $(archiveType)
    archiveFile: '$(Build.SourcesDirectory)/build/$(archiveFileName)'
# - task: EsrpCodeSigning@2
#   displayName: 'Code Signing'
#   inputs:
#     ConnectedServiceName: 'Database System ESRP Connector'
#     FolderPath: '$(Build.SourcesDirectory)/build'
#     Pattern: *
#     useMinimatch: true
#     signConfigType: inlineSignParams
#     inlineOperation: |
#       [
#         {
#           "KeyCode" : "CP-450779-Pgp",
#           "OperationCode" : "PgpClearSign",
#           "Parameters" : {},
#           "ToolName" : "sign",
#           "ToolVersion" : "1.0"
#         }
#       ]
#     SessionTimeout: '60'
#     MaxConcurrency: '50'
#     MaxRetryAttempts: '5'
- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: |
      build/*.zip
      build/*.tar.gz
    targetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: build